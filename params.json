{"name":"Silverstripe CacheInclude","tagline":"Fast Partial Caching for SilverStripe","body":"# SilverStripe Cache Include\r\n\r\n[![Build Status](https://travis-ci.org/heyday/silverstripe-cacheinclude.svg?branch=master)](https://travis-ci.org/heyday/silverstripe-cacheinclude)\r\n\r\nTemplate caching based on urls not DB queries.\r\n\r\n## Features\r\n\r\n* Cache keys are built from information available in request object (means no DB calls)\r\n* Invalidation hooks for when DataObject's are modified\r\n* Uses `doctrine/cache` library, providing many cache backends\r\n* Uses Symfony Expression language for fine-grained invalidation control\r\n* Support for `<% cache %><% end_cache %>` syntax in templates\r\n* A full request cache that includes the ability to substitute security tokens\r\n* Highly customisable\r\n\r\nFor a SilverStripe `2.4` compatible version, see the `2.0.4` tag.\r\n\r\n## Installation\r\n\r\n  $ composer require silverstripe-cacheinclude:~4.0\r\n\r\n## How to use\r\n\r\n### Enabling\r\n\r\nTo  be able to invalidate caches from DataObject writes, add the `InvalidationExtension`:\r\n\r\n1. Create a config file `mysite/_config/caching.yml`\r\n2. Add the following to the yml file\r\n\r\n```yml\r\n---\r\nAfter: 'silverstripe-cacheinclude/*'\r\n---\r\nDataObject:\r\n  extensions:\r\n    - Heyday\\CacheInclude\\SilverStripe\\InvalidationExtension\r\n```\r\n\r\n### Template Usage\r\n\r\nCache a section of a template:\r\n\r\n```\r\n<% cache 'SomeCacheBlock' %>\r\n<% loop ExpensiveSet %><% end_loop %>\r\n<% end_cache %>\r\n```\r\n\r\nCache an included template:\r\n\r\n```\r\n<% cache_include 'SomeTemplateName' %>\r\n```\r\n\r\n### Cache block config\r\n\r\nFor each cache block that is used, you need a corresponding config provided to `CacheInclude`.\r\n\r\nThe following is an example of a config for `SomeCacheBlock` and `AnotherCacheBlock`:\r\n\r\n`mysite/_config/caching.yml`\r\n\r\n```yml\r\n---\r\nAfter: 'silverstripe-cacheinclude/*'\r\n---\r\nInjector:\r\n  CacheIncludeConfig:\r\n    class: Heyday\\CacheInclude\\Configs\\ArrayConfig\r\n    properties:\r\n      Config:\r\n        SomeCacheBlock:\r\n          context: full\r\n          contains:\r\n            - MyDataObject\r\n        AnotherCacheBlock:\r\n          context: no\r\n          expires: +1 hour\r\n```\r\n\r\n### Configuration options\r\n\r\nKey creation options:\r\n\r\n#### `context`\r\n\r\nContext is a method to tell the key creator what information about the request to include in the created key.\r\n\r\nPossible values:\r\n\r\n* `no`\r\n  * Key created is independent of the request\r\n* `page`\r\n  * Key is created based on url, but not including GET variables\r\n* `full`\r\n  * Key is created based on url, including GET variables\r\n\r\n#### `expires`\r\n\r\nPossible values:\r\n\r\n* (string)\r\n  * A string to pass into strtotime e.g. '+1 hour'\r\n* (int)\r\n  * A number of seconds\r\n\r\n#### `member`\r\n\r\nPossible values:\r\n\r\n* `true`\r\n  * Will create a new cache per logged in member\r\n* `any`\r\n  * Will create a new cache members as a group (and another key when a person is not logged in)\r\n\r\n#### `versions`\r\n\r\nPossible values:\r\n\r\n* (int)\r\n  * Set this to an integer to make the specified number of versions of the cache\r\n  \r\nThis is useful for when a cache block contains random content, but you still want caching.\r\n\r\ne.g. set to 20 to get 20 (potentially) different version of a cache block.\r\n\r\nCache invalidation options\r\n\r\n#### `contains`\r\n\r\n* (array)\r\n  * An array of class names that if a record saved matches the cache will invalidate\r\n\r\n#### `invalidation_rules`\r\n\r\n* (array)\r\n  * An array of rules written in the available expression language. If a rule is matched the cache will invalidate\r\n\r\nThe Expression Language is provided by Symfony, but also has the following available:\r\n\r\n##### Variables\r\n\r\n- `item`\r\n- `action`\r\n\r\n##### Functions\r\n\r\n- `list()`\r\n- `instanceof()`\r\n\r\nTheses can be used to do the following:\r\n\r\n```\r\n  invalidation_rules:\r\n    - \"instanceof(item, 'CreativeProfile') and item.ID in list('CreativeProfile').sort('Created DESC').limit(4).getIDList()\"\r\n```\r\n\r\n## Full request caching\r\n\r\nCacheInclude comes with a `RequestCache` service that can be added to cache full request objects for use in high load\r\nsites.\r\n\r\n### Enabling\r\n\r\nTo enable the full request cache the `RequestCache` service needs to be added to the `RequestProcessor` as a filter.\r\n\r\n```yml\r\nInjector:\r\n  RequestProcessor:\r\n    class: RequestProcessor\r\n    properties:\r\n      filters:\r\n        - '%$RequestCache'\r\n```\r\n\r\nFull request caching increases performance substantially but it isn't without a cost. It can be hard to configure, as there\r\nare numerous cases where you don't want to either cache a request or alternatively serve a cached request.\r\n\r\nTo help in this there is quite a bit you can do out of the box to configure the way that caching is handled.\r\n\r\nThe following gives some demonstration of how to configure things and what you can do:\r\n\r\n```yml\r\nInjector:\r\n  RequestCache:\r\n    class: Heyday\\CacheInclude\\RequestCache\r\n    constructor:\r\n      0: '%$CacheInclude'\r\n      1: '%$CacheIncludeExpressionLanguage'\r\n      2: Global\r\n    properties:\r\n      # Add here any security token services that shouldn't be cached within the request\r\n      # Each token from this list that appears in cached content will be swapped out with a dummy string\r\n      # This dummy string will be replaced with a real token when a cache is served\r\n      Tokens:\r\n        - '%$SecurityToken'\r\n\r\n      # Expression language rules:\r\n      # Add here any rules that should cause a request to not have a cache saved\r\n      SaveExcludeRules:\r\n        - 'request.getUrl() matches \"/^\\\\/admin|dev/\"'\r\n\r\n      # Add here any rules that must pass in order for a request to have a cache saved\r\n      SaveIncludeRules:\r\n        - \"request.httpMethod() == 'GET'\"\r\n        - \"response.getStatusCode() == 200\"\r\n\r\n      # Add here any rules that should cause a request to not have a cache served\r\n      FetchExcludeRules:\r\n        - 'request.getUrl() matches \"/^\\\\/admin|dev/\"'\r\n\r\n      # Add here any rules that must pass in order for a request to have a cache served\r\n      FetchIncludeRules:\r\n        - \"request.httpMethod() == 'GET'\"\r\n```\r\n\r\nAs you can see above there are some variables made accessible to you in the expression language.\r\n\r\nThe following is made available in the \"Save\" rules:\r\n\r\n* `request`\r\n* `response`\r\n* `member`\r\n* `session`\r\n\r\nThe following is made available in the \"Fetch\" rules:\r\n\r\n* `request`\r\n* `member`\r\n* `session`\r\n\r\nAdditional variables can be provided through the injector system.\r\n \r\n```yml\r\nInjector:\r\n  RequestCache:\r\n    properties:\r\n      ExtraExpressionVars:\r\n        'hello': 'Something'\r\n```\r\n\r\n## License\r\n\r\nSilverStripe CacheInclude is released under the [MIT license](http://heyday.mit-license.org/)\r\n\r\n## Contributing\r\n\r\n### Unit Testing\r\n\r\n```bash\r\n$ composer install --prefer-dist --dev\r\n$ phpunit\r\n```\r\n\r\n### Code guidelines\r\n\r\nThis project follows the standards defined in:\r\n\r\n* [PSR-0](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md)\r\n* [PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md)\r\n* [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)\r\n\r\nRun the following before contributing:\r\n\r\n```bash\r\n$ php-cs-fixer fix .\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}